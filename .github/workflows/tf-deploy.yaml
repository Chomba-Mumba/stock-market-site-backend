name: 'Deploy AWS Resources'

on:
  workflow_run:
    workflows: ["Python Lambda Tests"]  # The name of the test workflow
    types: [completed]
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  TF_LOG: INFO
  # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 

jobs:  
  docker-build-push:   
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.push-image.outputs.image_uri }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.11.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.11.9"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
      with:
        role-to-assume: arn:aws:iam::429116711298:role/stock_market_backend_cicd_role
        aws-region: eu-west-2

    - name: Docker Login
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with: 
        aws-region: eu-west-2

    - name: Build, tag, and push docker image to Amazon ECR
      id: push-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: stock_market_prediction/lambda_functions
        IMAGE_TAG: latest
      run: |
        cd "predictions_lambda/"
        IMAGE_URI="$REGISTRY/$REPOSITORY:$IMAGE_TAG"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "::add-mask::$IMAGE_URI"
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  terraform:
    needs: docker-build-push
    name: "Terraform infrastructure change management"
    env:
      TF_VAR_image_uri: ${{ needs.docker-build-push.outputs.image_uri}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout Repository to Runner
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::429116711298:role/stock_market_backend_cicd_role
          aws-region: eu-west-2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
         terraform_version: 1.3.0
      
      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform format
        id: format
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -out=tfplan -no-color -input=false
        continue-on-error: true
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terrafrom Apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -auto-approve tfplan